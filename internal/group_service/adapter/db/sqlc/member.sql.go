// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: member.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMember = `-- name: AddMember :exec
INSERT INTO members
(group_id, member_login)
VALUES
($1,$2)
`

type AddMemberParams struct {
	GroupID     pgtype.Int8
	MemberLogin pgtype.Text
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) error {
	_, err := q.db.Exec(ctx, addMember, arg.GroupID, arg.MemberLogin)
	return err
}

const getMembers = `-- name: GetMembers :many
SELECT member_login FROM
groups JOIN members
ON groups.id = members.group_id
WHERE group_id = $1
`

func (q *Queries) GetMembers(ctx context.Context, groupID pgtype.Int8) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getMembers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var member_login pgtype.Text
		if err := rows.Scan(&member_login); err != nil {
			return nil, err
		}
		items = append(items, member_login)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isMember = `-- name: IsMember :one
SELECT CASE WHEN EXISTS (
    SELECT group_id, member_login FROM members
    WHERE member_login = $1 AND group_id = $2
)
THEN TRUE
ELSE FALSE END
`

type IsMemberParams struct {
	MemberLogin pgtype.Text
	GroupID     pgtype.Int8
}

func (q *Queries) IsMember(ctx context.Context, arg IsMemberParams) (bool, error) {
	row := q.db.QueryRow(ctx, isMember, arg.MemberLogin, arg.GroupID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
