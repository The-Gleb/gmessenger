// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: message.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMessage = `-- name: AddMessage :one
INSERT INTO messages
(sender, group_id, text, status, created_at)
VALUES
($1,$2,$3,$4,$5)
RETURNING id, sender, group_id, text, status, created_at
`

type AddMessageParams struct {
	Sender    pgtype.Text
	GroupID   pgtype.Int8
	Text      pgtype.Text
	Status    pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, addMessage,
		arg.Sender,
		arg.GroupID,
		arg.Text,
		arg.Status,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.GroupID,
		&i.Text,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, sender, group_id, text, status, created_at FROM messages
WHERE group_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type GetMessagesParams struct {
	GroupID pgtype.Int8
	Limit   int32
	Offset  int32
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessages, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.GroupID,
			&i.Text,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageStatus = `-- name: UpdateMessageStatus :one
UPDATE messages
SET status = $2
WHERE id = $1
RETURNING id, sender, group_id, text, status, created_at
`

type UpdateMessageStatusParams struct {
	ID     int64
	Status pgtype.Text
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessageStatus, arg.ID, arg.Status)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.GroupID,
		&i.Text,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
