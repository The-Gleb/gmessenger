// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: group.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups
(name, created_at)
VALUES
($1,$2)
RETURNING id, name, created_at
`

type CreateGroupParams struct {
	Name      pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.CreatedAt)
	var i Group
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const exists = `-- name: Exists :one
SELECT CASE WHEN EXISTS (
    SELECT id, name, created_at FROM groups
    WHERE id = $1
)
THEN TRUE
ELSE FALSE END
`

func (q *Queries) Exists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, exists, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getGroups = `-- name: GetGroups :many
SELECT id, name, created_at, group_id, member_login FROM
groups JOIN members
ON groups.id = members.group_id
WHERE member_login = $1
`

type GetGroupsRow struct {
	ID          int64
	Name        pgtype.Text
	CreatedAt   pgtype.Timestamp
	GroupID     pgtype.Int8
	MemberLogin pgtype.Text
}

func (q *Queries) GetGroups(ctx context.Context, memberLogin pgtype.Text) ([]GetGroupsRow, error) {
	rows, err := q.db.Query(ctx, getGroups, memberLogin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupsRow
	for rows.Next() {
		var i GetGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.GroupID,
			&i.MemberLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
