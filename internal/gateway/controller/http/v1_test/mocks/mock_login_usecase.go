// Code generated by MockGen. DO NOT EDIT.
// Source: app/gateway/controller/http/v1/handler/login.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/gmessenger/app/gateway/domain/entity"
	login_usecase "github.com/The-Gleb/gmessenger/app/gateway/domain/usecase/login"
	gomock "github.com/golang/mock/gomock"
)

// MockLoginUsecase is a mock of LoginUsecase interface.
type MockLoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUsecaseMockRecorder
}

// MockLoginUsecaseMockRecorder is the mock recorder for MockLoginUsecase.
type MockLoginUsecaseMockRecorder struct {
	mock *MockLoginUsecase
}

// NewMockLoginUsecase creates a new mock instance.
func NewMockLoginUsecase(ctrl *gomock.Controller) *MockLoginUsecase {
	mock := &MockLoginUsecase{ctrl: ctrl}
	mock.recorder = &MockLoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUsecase) EXPECT() *MockLoginUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginUsecase) Login(ctx context.Context, usecaseDTO login_usecase.LoginDTO) (entity.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, usecaseDTO)
	ret0, _ := ret[0].(entity.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginUsecaseMockRecorder) Login(ctx, usecaseDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginUsecase)(nil).Login), ctx, usecaseDTO)
}
