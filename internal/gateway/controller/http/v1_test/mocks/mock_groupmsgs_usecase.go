// Code generated by MockGen. DO NOT EDIT.
// Source: app/gateway/controller/http/v1/handler/groupmsgs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/gmessenger/app/gateway/domain/entity"
	groupmsgs_usecase "github.com/The-Gleb/gmessenger/app/gateway/domain/usecase/groupmsgs"
	gomock "github.com/golang/mock/gomock"
)

// MockGroupMsgsUsecase is a mock of GroupMsgsUsecase interface.
type MockGroupMsgsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMsgsUsecaseMockRecorder
}

// MockGroupMsgsUsecaseMockRecorder is the mock recorder for MockGroupMsgsUsecase.
type MockGroupMsgsUsecaseMockRecorder struct {
	mock *MockGroupMsgsUsecase
}

// NewMockGroupMsgsUsecase creates a new mock instance.
func NewMockGroupMsgsUsecase(ctrl *gomock.Controller) *MockGroupMsgsUsecase {
	mock := &MockGroupMsgsUsecase{ctrl: ctrl}
	mock.recorder = &MockGroupMsgsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupMsgsUsecase) EXPECT() *MockGroupMsgsUsecaseMockRecorder {
	return m.recorder
}

// GetGroupMessages mocks base method.
func (m *MockGroupMsgsUsecase) GetGroupMessages(ctx context.Context, dto groupmsgs_usecase.GetGroupMessagesDTO) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMessages", ctx, dto)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMessages indicates an expected call of GetGroupMessages.
func (mr *MockGroupMsgsUsecaseMockRecorder) GetGroupMessages(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMessages", reflect.TypeOf((*MockGroupMsgsUsecase)(nil).GetGroupMessages), ctx, dto)
}
