// Code generated by MockGen. DO NOT EDIT.
// Source: app/gateway/controller/http/v1/handler/groupws.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	groupws_usecase "github.com/The-Gleb/gmessenger/app/gateway/domain/usecase/groupws"
	gomock "github.com/golang/mock/gomock"
)

// MockGroupWSUsecase is a mock of GroupWSUsecase interface.
type MockGroupWSUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGroupWSUsecaseMockRecorder
}

// MockGroupWSUsecaseMockRecorder is the mock recorder for MockGroupWSUsecase.
type MockGroupWSUsecaseMockRecorder struct {
	mock *MockGroupWSUsecase
}

// NewMockGroupWSUsecase creates a new mock instance.
func NewMockGroupWSUsecase(ctrl *gomock.Controller) *MockGroupWSUsecase {
	mock := &MockGroupWSUsecase{ctrl: ctrl}
	mock.recorder = &MockGroupWSUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupWSUsecase) EXPECT() *MockGroupWSUsecaseMockRecorder {
	return m.recorder
}

// OpenGroup mocks base method.
func (m *MockGroupWSUsecase) OpenGroup(ctx context.Context, dto groupws_usecase.OpenGroupDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenGroup", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenGroup indicates an expected call of OpenGroup.
func (mr *MockGroupWSUsecaseMockRecorder) OpenGroup(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenGroup", reflect.TypeOf((*MockGroupWSUsecase)(nil).OpenGroup), ctx, dto)
}
