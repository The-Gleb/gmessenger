// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: message.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages
(sender, receiver, text, status, created_at)
VALUES
($1, $2, $3, $4, $5)
RETURNING id, sender, receiver, text, status, created_at
`

type CreateMessageParams struct {
	Sender    pgtype.Text
	Receiver  pgtype.Text
	Text      pgtype.Text
	Status    pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.Sender,
		arg.Receiver,
		arg.Text,
		arg.Status,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.Text,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getLastMessage = `-- name: GetLastMessage :one
SELECT id, sender, receiver, text, status, created_at FROM messages
WHERE (sender = $1 AND receiver = $2)
OR (sender = $2 AND receiver = $1)
ORDER BY id
LIMIT $3 OFFSET $4
`

type GetLastMessageParams struct {
	Sender   pgtype.Text
	Receiver pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) GetLastMessage(ctx context.Context, arg GetLastMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, getLastMessage,
		arg.Sender,
		arg.Receiver,
		arg.Limit,
		arg.Offset,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.Text,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, sender, receiver, text, status, created_at FROM messages
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.Text,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesByUsers = `-- name: GetMessagesByUsers :many
SELECT id, sender, receiver, text, status, created_at FROM messages
WHERE (sender = $1 AND receiver = $2)
OR (sender = $2 AND receiver = $1)
ORDER BY id
LIMIT $3 OFFSET $4
`

type GetMessagesByUsersParams struct {
	Sender   pgtype.Text
	Receiver pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) GetMessagesByUsers(ctx context.Context, arg GetMessagesByUsersParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByUsers,
		arg.Sender,
		arg.Receiver,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Receiver,
			&i.Text,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadNumber = `-- name: GetUnreadNumber :one
SELECT COUNT(*) FROM messages
WHERE (sender = $1 AND receiver = $2 AND status != 'READ')
`

type GetUnreadNumberParams struct {
	Sender   pgtype.Text
	Receiver pgtype.Text
}

func (q *Queries) GetUnreadNumber(ctx context.Context, arg GetUnreadNumberParams) (int64, error) {
	row := q.db.QueryRow(ctx, getUnreadNumber, arg.Sender, arg.Receiver)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateMessageStatus = `-- name: UpdateMessageStatus :one
UPDATE messages
SET status = $1
WHERE id = $2
RETURNING id, sender, receiver, text, status, created_at
`

type UpdateMessageStatusParams struct {
	Status pgtype.Text
	ID     int64
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessageStatus, arg.Status, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.Text,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
