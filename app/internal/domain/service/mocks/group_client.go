// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/The-Gleb/gmessenger/app/pkg/proto/go/group (interfaces: GroupClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	group "github.com/The-Gleb/gmessenger/app/pkg/proto/go/group"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGroupClient is a mock of GroupClient interface.
type MockGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockGroupClientMockRecorder
}

// MockGroupClientMockRecorder is the mock recorder for MockGroupClient.
type MockGroupClientMockRecorder struct {
	mock *MockGroupClient
}

// NewMockGroupClient creates a new mock instance.
func NewMockGroupClient(ctrl *gomock.Controller) *MockGroupClient {
	mock := &MockGroupClient{ctrl: ctrl}
	mock.recorder = &MockGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupClient) EXPECT() *MockGroupClientMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockGroupClient) AddMessage(arg0 context.Context, arg1 *group.AddMessageRequest, arg2 ...grpc.CallOption) (*group.AddMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMessage", varargs...)
	ret0, _ := ret[0].(*group.AddMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockGroupClientMockRecorder) AddMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockGroupClient)(nil).AddMessage), varargs...)
}

// CheckMember mocks base method.
func (m *MockGroupClient) CheckMember(arg0 context.Context, arg1 *group.CheckMemberRequest, arg2 ...grpc.CallOption) (*group.CheckMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckMember", varargs...)
	ret0, _ := ret[0].(*group.CheckMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMember indicates an expected call of CheckMember.
func (mr *MockGroupClientMockRecorder) CheckMember(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMember", reflect.TypeOf((*MockGroupClient)(nil).CheckMember), varargs...)
}

// Create mocks base method.
func (m *MockGroupClient) Create(arg0 context.Context, arg1 *group.CreateRequest, arg2 ...grpc.CallOption) (*group.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*group.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupClient)(nil).Create), varargs...)
}

// GetGroups mocks base method.
func (m *MockGroupClient) GetGroups(arg0 context.Context, arg1 *group.GetGroupsRequest, arg2 ...grpc.CallOption) (*group.GetGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroups", varargs...)
	ret0, _ := ret[0].(*group.GetGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockGroupClientMockRecorder) GetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockGroupClient)(nil).GetGroups), varargs...)
}

// GetMembers mocks base method.
func (m *MockGroupClient) GetMembers(arg0 context.Context, arg1 *group.GetMembersRequest, arg2 ...grpc.CallOption) (*group.GetMembersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembers", varargs...)
	ret0, _ := ret[0].(*group.GetMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockGroupClientMockRecorder) GetMembers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockGroupClient)(nil).GetMembers), varargs...)
}

// GetMessageById mocks base method.
func (m *MockGroupClient) GetMessageById(arg0 context.Context, arg1 *group.GetMessageByIdRequest, arg2 ...grpc.CallOption) (*group.GetMessageByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessageById", varargs...)
	ret0, _ := ret[0].(*group.GetMessageByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageById indicates an expected call of GetMessageById.
func (mr *MockGroupClientMockRecorder) GetMessageById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageById", reflect.TypeOf((*MockGroupClient)(nil).GetMessageById), varargs...)
}

// GetMessages mocks base method.
func (m *MockGroupClient) GetMessages(arg0 context.Context, arg1 *group.GetMessagesRequest, arg2 ...grpc.CallOption) (*group.GetMessagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessages", varargs...)
	ret0, _ := ret[0].(*group.GetMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockGroupClientMockRecorder) GetMessages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockGroupClient)(nil).GetMessages), varargs...)
}

// UpdateMessageStatus mocks base method.
func (m *MockGroupClient) UpdateMessageStatus(arg0 context.Context, arg1 *group.UpdateMessageStatusRequest, arg2 ...grpc.CallOption) (*group.UpdateMessageStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMessageStatus", varargs...)
	ret0, _ := ret[0].(*group.UpdateMessageStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessageStatus indicates an expected call of UpdateMessageStatus.
func (mr *MockGroupClientMockRecorder) UpdateMessageStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageStatus", reflect.TypeOf((*MockGroupClient)(nil).UpdateMessageStatus), varargs...)
}
