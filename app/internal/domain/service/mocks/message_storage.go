// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/domain/service/message.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/gmessenger/app/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageStorage is a mock of MessageStorage interface.
type MockMessageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageStorageMockRecorder
}

// MockMessageStorageMockRecorder is the mock recorder for MockMessageStorage.
type MockMessageStorageMockRecorder struct {
	mock *MockMessageStorage
}

// NewMockMessageStorage creates a new mock instance.
func NewMockMessageStorage(ctrl *gomock.Controller) *MockMessageStorage {
	mock := &MockMessageStorage{ctrl: ctrl}
	mock.recorder = &MockMessageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageStorage) EXPECT() *MockMessageStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageStorage) Create(ctx context.Context, msg entity.Message) (entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, msg)
	ret0, _ := ret[0].(entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageStorageMockRecorder) Create(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageStorage)(nil).Create), ctx, msg)
}

// GetByID mocks base method.
func (m *MockMessageStorage) GetByID(ctx context.Context, id int64) (entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMessageStorageMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMessageStorage)(nil).GetByID), ctx, id)
}

// GetByUsers mocks base method.
func (m *MockMessageStorage) GetByUsers(ctx context.Context, senderLogin, receiverLogin string, limit, offset int) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsers", ctx, senderLogin, receiverLogin, limit, offset)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsers indicates an expected call of GetByUsers.
func (mr *MockMessageStorageMockRecorder) GetByUsers(ctx, senderLogin, receiverLogin, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsers", reflect.TypeOf((*MockMessageStorage)(nil).GetByUsers), ctx, senderLogin, receiverLogin, limit, offset)
}

// UpdateStatus mocks base method.
func (m *MockMessageStorage) UpdateStatus(ctx context.Context, msgID int64, status string) (entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, msgID, status)
	ret0, _ := ret[0].(entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockMessageStorageMockRecorder) UpdateStatus(ctx, msgID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMessageStorage)(nil).UpdateStatus), ctx, msgID, status)
}
